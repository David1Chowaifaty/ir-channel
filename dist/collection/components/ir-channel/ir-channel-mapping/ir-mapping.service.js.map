{"version":3,"file":"ir-mapping.service.js","sourceRoot":"","sources":["../../../../src/components/ir-channel/ir-channel-mapping/ir-mapping.service.ts"],"names":[],"mappings":"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","sourcesContent":["import calendar_data from '@/stores/calendar-data';\r\nimport channels_data from '@/stores/channel.store';\r\n\r\nexport class IrMappingService {\r\n  public removedMapping(ir_id: string, isRoomType: boolean) {\r\n    let selectedChannels = [...channels_data.mappedChannels];\r\n    if (isRoomType) {\r\n      const toBeRemovedRoomType = calendar_data.roomsInfo.find(room => room.id.toString() === ir_id);\r\n      selectedChannels = selectedChannels.filter(c => toBeRemovedRoomType.rateplans.find(rate_plan => rate_plan.id.toString() === c.ir_id) === undefined);\r\n    }\r\n    channels_data.mappedChannels = selectedChannels.filter(c => c.ir_id !== ir_id);\r\n  }\r\n  public checkMappingExists(id: string, isRoomType: boolean, roomTypeId?: string) {\r\n    const mapped_id = channels_data.mappedChannels.find(m => m.channel_id === id);\r\n    if (!mapped_id) {\r\n      if (!isRoomType) {\r\n        const matchingRoomType = channels_data.mappedChannels.find(m => m.channel_id.toString() === roomTypeId);\r\n        if (!matchingRoomType) {\r\n          return { hide: true, result: undefined, occupancy: undefined };\r\n        }\r\n      }\r\n      return { hide: false, result: undefined, occupancy: undefined };\r\n    }\r\n    if (isRoomType) {\r\n      const room_type = calendar_data.roomsInfo.find(room => room.id.toString() === mapped_id.ir_id);\r\n      return { hide: false, occupancy: room_type.occupancy_default.adult_nbr, result: room_type };\r\n    }\r\n    if (!roomTypeId) {\r\n      throw new Error('Missing room type id');\r\n    }\r\n    const matchingRoomType = channels_data.mappedChannels.find(m => m.channel_id.toString() === roomTypeId);\r\n    const room_type = calendar_data.roomsInfo.find(room => room.id.toString() === matchingRoomType.ir_id);\r\n    if (!room_type) {\r\n      throw new Error('Invalid Room type');\r\n    }\r\n    return { hide: false, occupancy: room_type.occupancy_default.adult_nbr, result: room_type.rateplans.find(r => r.id.toString() === mapped_id.ir_id) };\r\n  }\r\n  public getAppropriateRooms(isRoomType: boolean, roomTypeId?: string) {\r\n    if (isRoomType) {\r\n      const filteredRoomTypes = calendar_data.roomsInfo.filter(\r\n        room => channels_data.mappedChannels.find(m => m.ir_id.toString() === room.id.toString()) === undefined && room.is_active,\r\n      );\r\n      return filteredRoomTypes.map(room => ({ id: room.id.toString(), name: room.name, occupancy: room.occupancy_default.adult_nbr }));\r\n    }\r\n    if (!roomTypeId) {\r\n      throw new Error('Missing roomType id');\r\n    }\r\n    const matchingRoomType = channels_data.mappedChannels.find(m => m.channel_id.toString() === roomTypeId);\r\n    if (!matchingRoomType) {\r\n      throw new Error('Invalid room type id');\r\n    }\r\n    const selectedRoomType = calendar_data.roomsInfo.find(room => room.id.toString() === matchingRoomType.ir_id);\r\n    return selectedRoomType.rateplans\r\n      .filter(rate_plan => channels_data.mappedChannels.find(r => rate_plan.id.toString() === r.ir_id) === undefined && rate_plan['is_active'])\r\n      .map(rate_plan => ({\r\n        id: rate_plan.id.toString(),\r\n        name: rate_plan['short_name'],\r\n        occupancy: selectedRoomType.occupancy_default.adult_nbr,\r\n      }));\r\n  }\r\n}\r\n"]}