{"version":3,"file":"toBeAssigned.service.js","sourceRoot":"","sources":["../../src/services/toBeAssigned.service.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { IAvailableRoom, IRoomCategory, IUnassignedDates, InnerRecord } from '../models/tobeassigned';\r\nimport { dateDifference, dateToFormattedString } from '../utils/utils';\r\nimport { Token } from '@/models/Token';\r\n\r\nexport class ToBeAssignedService extends Token {\r\n  public async getUnassignedDates(propertyid: number, from_date: string, to_date: string) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_UnAssigned_Dates?Ticket=${token}`, {\r\n          propertyid,\r\n          from_date,\r\n          to_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return this.convertUnassignedDates(data.My_Result);\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async getUnassignedRooms(propertyid: number, specific_date: string, roomInfo: any, formattedLegendData: any) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Get_Aggregated_UnAssigned_Rooms?Ticket=${token}`, {\r\n          propertyid,\r\n          specific_date,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        return this.transformToAssignable(data, roomInfo, formattedLegendData);\r\n      } else {\r\n        throw new Error('Invalid Token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  public async assignUnit(booking_nbr: string, identifier: string, pr_id: number) {\r\n    try {\r\n      const token = this.getToken();\r\n      if (token) {\r\n        const { data } = await axios.post(`/Assign_Exposed_Room?Ticket=${token}`, {\r\n          booking_nbr,\r\n          identifier,\r\n          pr_id,\r\n        });\r\n        if (data.ExceptionMsg !== '') {\r\n          throw new Error(data.ExceptionMsg);\r\n        }\r\n        console.log(data);\r\n        return data['My_Result'];\r\n      } else {\r\n        throw new Error('Invalid token');\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw new Error(error);\r\n    }\r\n  }\r\n  private cleanSpacesAndSpecialChars(str: string) {\r\n    const regex = /[^a-zA-Z0-9]+/g;\r\n    return str.replace(regex, '');\r\n  }\r\n\r\n  private transformToAssignable(data: any, roomInfo, formattedLegendData): IRoomCategory[] {\r\n    const result: IRoomCategory[] = [];\r\n    data.My_Result.forEach((customer: any) => {\r\n      customer.unassigned_rooms.forEach((room: any) => {\r\n        let roomCategory: IRoomCategory = {\r\n          roomTypeName: room.room_type_name,\r\n          ID: room.identifier,\r\n          NAME: room.guest_name,\r\n          identifier: room.identifier,\r\n          FROM_DATE: room.unassigned_date,\r\n          TO_DATE: room.unassigned_date,\r\n          BOOKING_NUMBER: room.book_nbr,\r\n          STATUS: 'IN-HOUSE',\r\n          defaultDateRange: {\r\n            fromDate: undefined,\r\n            toDate: undefined,\r\n            fromDateTimeStamp: 0,\r\n            toDateTimeStamp: 0,\r\n            fromDateStr: '',\r\n            toDateStr: '',\r\n            dateDifference: 0,\r\n          },\r\n          NO_OF_DAYS: 1,\r\n          roomsInfo: roomInfo,\r\n          legendData: formattedLegendData,\r\n          availableRooms: [],\r\n          RT_ID: this.getRoomTypeId(room.room_type_name, roomInfo),\r\n        };\r\n        this.updateAvailableRooms(room, roomCategory, formattedLegendData, roomInfo);\r\n        this.addDefaultDateRange(roomCategory);\r\n        result.push(roomCategory);\r\n      });\r\n    });\r\n    return result;\r\n  }\r\n  addDefaultDateRange(roomCategory: IRoomCategory) {\r\n    roomCategory.defaultDateRange.fromDate = new Date(roomCategory.FROM_DATE + 'T00:00:00');\r\n    roomCategory.defaultDateRange.fromDateStr = dateToFormattedString(roomCategory.defaultDateRange.fromDate);\r\n    roomCategory.defaultDateRange.fromDateTimeStamp = roomCategory.defaultDateRange.fromDate.getTime();\r\n\r\n    roomCategory.defaultDateRange.toDate = new Date(roomCategory.TO_DATE + 'T00:00:00');\r\n    roomCategory.defaultDateRange.toDateStr = dateToFormattedString(roomCategory.defaultDateRange.toDate);\r\n    roomCategory.defaultDateRange.toDateTimeStamp = roomCategory.defaultDateRange.toDate.getTime();\r\n\r\n    roomCategory.defaultDateRange.dateDifference = roomCategory.NO_OF_DAYS;\r\n  }\r\n  private getRoomTypeId(roomName: string, roomInfo: any) {\r\n    return roomInfo.find(room => this.cleanSpacesAndSpecialChars(room.name) === this.cleanSpacesAndSpecialChars(roomName)).id || null;\r\n  }\r\n  private updateAvailableRooms(room: any, roomCategory: IRoomCategory, formattedLegendData, roomsInfo): void {\r\n    const rooms: IAvailableRoom[] = [];\r\n    room.assignable_units.forEach((unit: any) => {\r\n      if (unit.Is_Fully_Available && !unit.Is_Not_Available) {\r\n        const days = dateDifference(unit.from_date, unit.to_date);\r\n        rooms.push({\r\n          RT_ID: roomCategory.RT_ID,\r\n          STATUS: 'PENDING-CONFIRMATION',\r\n          FROM_DATE: unit.from_date,\r\n          roomName: unit.name,\r\n          PR_ID: unit.pr_id,\r\n          TO_DATE: unit.to_date,\r\n          NO_OF_DAYS: days,\r\n          ID: 'NEW_TEMP_EVENT',\r\n          NAME: '',\r\n          NOTES: '',\r\n          BALANCE: '',\r\n          INTERNAL_NOTE: '',\r\n          hideBubble: true,\r\n          legendData: formattedLegendData,\r\n          roomsInfo,\r\n        });\r\n        roomCategory.TO_DATE = unit.to_date;\r\n        roomCategory.NO_OF_DAYS = days;\r\n      }\r\n    });\r\n    roomCategory.availableRooms = rooms;\r\n  }\r\n\r\n  private convertUnassignedDates(dates: IUnassignedDates[]): Record<number, InnerRecord> {\r\n    let convertedDates: Record<number, InnerRecord> = {};\r\n    dates.forEach(date => {\r\n      let newDate = new Date(date.date);\r\n      newDate.setHours(0, 0, 0, 0);\r\n      convertedDates[newDate.getTime()] = {\r\n        categories: {},\r\n        dateStr: date.description,\r\n      };\r\n    });\r\n    return convertedDates;\r\n  }\r\n}\r\n"]}