{"version":3,"file":"booking.js","sourceRoot":"","sources":["../../src/utils/booking.ts"],"names":[],"mappings":"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","sourcesContent":["import moment from 'moment';\r\nimport { PhysicalRoomType, MonthType, CellType, STATUS, RoomBookingDetails, RoomBlockDetails } from '../models/IBooking';\r\nimport { dateDifference, isBlockUnit } from './utils';\r\nimport axios from 'axios';\r\nimport locales from '@/stores/locales.store';\r\nimport calendar_data from '@/stores/calendar-data';\r\n\r\nexport async function getMyBookings(months: MonthType[]): Promise<any[]> {\r\n  const myBookings: any[] = [];\r\n  const stayStatus = await getStayStatus();\r\n  for (const month of months) {\r\n    for (const day of month.days) {\r\n      for (const room of day.room_types) {\r\n        assignBooking(room.physicalrooms, myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n\r\n  return myBookings;\r\n}\r\n\r\nfunction assignBooking(physicalRoom: PhysicalRoomType[], myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  for (const room of physicalRoom) {\r\n    for (const key in room.calendar_cell) {\r\n      if (room.calendar_cell[key].Is_Available === false) {\r\n        addOrUpdateBooking(room.calendar_cell[key], myBookings, stayStatus);\r\n      }\r\n    }\r\n  }\r\n}\r\nconst status: Record<string, STATUS> = {\r\n  '004': 'BLOCKED',\r\n  '003': 'BLOCKED-WITH-DATES',\r\n  '002': 'BLOCKED',\r\n};\r\nexport const bookingStatus: Record<string, STATUS> = {\r\n  '000': 'IN-HOUSE',\r\n  '001': 'PENDING-CONFIRMATION',\r\n  '002': 'CONFIRMED',\r\n  '003': 'CHECKED-OUT',\r\n};\r\n\r\nexport function formatName(firstName: string | null, lastName: string | null) {\r\n  if (firstName === null && lastName === null) return '';\r\n  if (lastName !== null && lastName !== '') {\r\n    return `${firstName ?? ''} , ${lastName ?? ''}`;\r\n  }\r\n  return firstName;\r\n}\r\nasync function getStayStatus() {\r\n  try {\r\n    const token = calendar_data.token;\r\n    if (token) {\r\n      const { data } = await axios.post(`/Get_Setup_Entries_By_TBL_NAME_Multi?Ticket=${token}`, {\r\n        TBL_NAMES: ['_STAY_STATUS'],\r\n      });\r\n      return data.My_Result.map(d => ({\r\n        code: d.CODE_NAME,\r\n        value: d.CODE_VALUE_EN,\r\n      }));\r\n    } else {\r\n      throw new Error('Invalid Token');\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\nfunction renderBlock003Date(date, hour, minute) {\r\n  const dt = new Date(date);\r\n  dt.setHours(hour);\r\n  dt.setMinutes(minute);\r\n  return `${locales.entries.Lcz_BlockedTill} ${moment(dt).format('MMM DD, HH:mm')}`;\r\n}\r\nfunction getDefaultData(cell: CellType, stayStatus: { code: string; value: string }[]): any {\r\n  if (isBlockUnit(cell.STAY_STATUS_CODE)) {\r\n    return {\r\n      ID: cell.POOL,\r\n      NOTES: '',\r\n      BALANCE: '',\r\n      NAME:\r\n        cell.My_Block_Info.NOTES !== ''\r\n          ? cell.My_Block_Info.NOTES\r\n          : cell.STAY_STATUS_CODE === '003'\r\n          ? renderBlock003Date(cell.My_Block_Info.BLOCKED_TILL_DATE, cell.My_Block_Info.BLOCKED_TILL_HOUR, cell.My_Block_Info.BLOCKED_TILL_MINUTE)\r\n          : stayStatus.find(st => st.code === cell.STAY_STATUS_CODE).value || '',\r\n      RELEASE_AFTER_HOURS: cell.My_Block_Info.DESCRIPTION,\r\n      PR_ID: cell.My_Block_Info.pr_id,\r\n      ENTRY_DATE: cell.My_Block_Info.BLOCKED_TILL_DATE,\r\n      ENTRY_HOUR: cell.My_Block_Info.BLOCKED_TILL_HOUR,\r\n      ENTRY_MINUTE: cell.My_Block_Info.BLOCKED_TILL_MINUTE,\r\n      OPTIONAL_REASON: cell.My_Block_Info.NOTES,\r\n      FROM_DATE: cell.DATE,\r\n      TO_DATE: cell.DATE,\r\n      NO_OF_DAYS: 1,\r\n      STATUS: status[cell.STAY_STATUS_CODE],\r\n      POOL: cell.POOL,\r\n      STATUS_CODE: cell.STAY_STATUS_CODE,\r\n      OUT_OF_SERVICE: cell.STAY_STATUS_CODE === '004',\r\n      FROM_DATE_STR: cell.My_Block_Info.format.from_date,\r\n      TO_DATE_STR: cell.My_Block_Info.format.to_date,\r\n    };\r\n  }\r\n  //console.log('booking', cell);\r\n  // if (!cell.booking.is_direct) {\r\n  //   console.log(formatName(cell.room.guest.first_name, cell.room.guest.last_name), cell.booking.channel_booking_nbr);\r\n  // }\r\n  if (cell.booking.booking_nbr === '88237899') {\r\n    console.log(cell);\r\n  }\r\n  return {\r\n    ID: cell.POOL,\r\n    TO_DATE: cell.DATE,\r\n    FROM_DATE: cell.DATE,\r\n    NO_OF_DAYS: 1,\r\n    STATUS: bookingStatus[cell.booking?.status.code],\r\n    NAME: formatName(cell.room.guest.first_name, cell.room.guest.last_name),\r\n    IDENTIFIER: cell.room.identifier,\r\n    PR_ID: cell.pr_id,\r\n    POOL: cell.POOL,\r\n    BOOKING_NUMBER: cell.booking.booking_nbr,\r\n    NOTES: cell.booking.is_direct ? cell.booking.remark : null,\r\n    is_direct: cell.booking.is_direct,\r\n    BALANCE: cell.booking.financial?.due_amount,\r\n    channel_booking_nbr: cell.booking.channel_booking_nbr,\r\n    ///from here\r\n    //ENTRY_DATE: cell.booking.booked_on.date,\r\n    // IS_EDITABLE: cell.booking.is_editable,\r\n    // ARRIVAL: cell.booking.arrival,\r\n    // PHONE: cell.booking.guest.mobile ?? '',\r\n    // RATE: cell.room.total,\r\n    // RATE_PLAN: cell.room.rateplan.name,\r\n    // SPLIT_BOOKING: false,\r\n    // RATE_PLAN_ID: cell.room.rateplan.id,\r\n    // RATE_TYPE: 1,\r\n    // ADULTS_COUNT: cell.room.occupancy.adult_nbr,\r\n    // CHILDREN_COUNT: cell.room.occupancy.children_nbr,\r\n    // origin: cell.booking.origin,\r\n    // GUEST: cell.booking.guest,\r\n    // ROOMS: cell.booking.rooms,\r\n    // cancelation: cell.room.rateplan.cancelation,\r\n    // guarantee: cell.room.rateplan.guarantee,\r\n    // TOTAL_PRICE: cell.room.total,\r\n    // COUNTRY: cell.booking.guest.country_id,\r\n    // FROM_DATE_STR: cell.booking.format.from_date,\r\n    // TO_DATE_STR: cell.booking.format.to_date,\r\n    // adult_child_offering: cell.room.rateplan.selected_variation.adult_child_offering,\r\n    // SOURCE: { code: cell.booking.source.code, description: cell.booking.source.description, tag: cell.booking.source.tag },\r\n  };\r\n}\r\n\r\nfunction updateBookingWithStayData(data: any, cell: CellType): any {\r\n  data.NO_OF_DAYS = dateDifference(data.FROM_DATE, cell.DATE);\r\n  data.TO_DATE = cell.DATE;\r\n  if (cell.booking) {\r\n    const { arrival } = cell.booking;\r\n    Object.assign(data, {\r\n      ARRIVAL_TIME: arrival.description,\r\n    });\r\n  }\r\n  return data;\r\n}\r\n\r\nfunction addOrUpdateBooking(cell: CellType, myBookings: any[], stayStatus: { code: string; value: string }[]): void {\r\n  const index = myBookings.findIndex(booking => booking.POOL === cell.POOL);\r\n\r\n  if (index === -1) {\r\n    const newData = getDefaultData(cell, stayStatus);\r\n    myBookings.push(newData);\r\n  } else {\r\n    const updatedData = updateBookingWithStayData(myBookings[index], cell);\r\n    myBookings[index] = updatedData;\r\n  }\r\n}\r\nexport function transformNewBooking(data: any): RoomBookingDetails[] {\r\n  let bookings: RoomBookingDetails[] = [];\r\n  //console.log(data);\r\n  const renderStatus = room => {\r\n    const now = moment();\r\n    const toDate = moment(room.to_date, 'YYYY-MM-DD');\r\n    const fromDate = moment(room.from_date, 'YYYY-MM-DD');\r\n\r\n    if (fromDate.isSame(now, 'day') && now.hour() >= 12) {\r\n      return bookingStatus['000'];\r\n    } else if (now.isAfter(fromDate, 'day') && now.isBefore(toDate, 'day')) {\r\n      return bookingStatus['000'];\r\n    } else if (toDate.isSame(now, 'day') && now.hour() < 12) {\r\n      return bookingStatus['000'];\r\n    } else if ((toDate.isSame(now, 'day') && now.hour() >= 12) || toDate.isBefore(now, 'day')) {\r\n      return bookingStatus['003'];\r\n    } else {\r\n      return bookingStatus[data?.status.code || '001'];\r\n    }\r\n    // if (toDate.isBefore(now, 'day') || (toDate.isSame(now, 'day') && now.hour() >= 12)) {\r\n    //   return bookingStatus['003'];\r\n    // } else {\r\n    //   return bookingStatus[fromDate.isSameOrBefore(now, 'day') ? '000' : data?.status.code || '001'];\r\n    // }\r\n  };\r\n  const rooms = data.rooms.filter(room => !!room['assigned_units_pool']);\r\n  rooms.forEach(room => {\r\n    bookings.push({\r\n      ID: room['assigned_units_pool'],\r\n      TO_DATE: room.to_date,\r\n      FROM_DATE: room.from_date,\r\n      NO_OF_DAYS: room.days.length,\r\n      ARRIVAL: data.arrival,\r\n      IS_EDITABLE: true,\r\n      BALANCE: data.financial?.due_amount,\r\n      STATUS: renderStatus(room),\r\n      NAME: formatName(room.guest.first_name, room.guest.last_name),\r\n      PHONE: data.guest.mobile ?? '',\r\n      ENTRY_DATE: '12-12-2023',\r\n      RATE: room.total,\r\n      RATE_PLAN: room.rateplan.name,\r\n      SPLIT_BOOKING: false,\r\n      RATE_PLAN_ID: room.rateplan.id,\r\n      IDENTIFIER: room.identifier,\r\n      RATE_TYPE: room.roomtype.id,\r\n      ADULTS_COUNT: room.occupancy.adult_nbr,\r\n      CHILDREN_COUNT: room.occupancy.children_nbr,\r\n      PR_ID: +room.unit.id,\r\n      POOL: room['assigned_units_pool'],\r\n      GUEST: data.guest,\r\n      ROOMS: data.rooms,\r\n      BOOKING_NUMBER: data.booking_nbr,\r\n      cancelation: room.rateplan.cancelation,\r\n      guarantee: room.rateplan.guarantee,\r\n      TOTAL_PRICE: room.gross_total,\r\n      COUNTRY: data.guest.country_id,\r\n      FROM_DATE_STR: data.format.from_date,\r\n      TO_DATE_STR: data.format.to_date,\r\n      adult_child_offering: room.rateplan.selected_variation.adult_child_offering,\r\n      ARRIVAL_TIME: data.arrival.description,\r\n      origin: data.origin,\r\n      channel_booking_nbr: data.channel_booking_nbr,\r\n      is_direct: data.is_direct,\r\n      NOTES: data.is_direct ? data.remark : null,\r\n      SOURCE: { code: data.source.code, description: data.source.description, tag: data.source.tag },\r\n      ota_notes: data.ota_notes,\r\n    });\r\n  });\r\n\r\n  return bookings;\r\n}\r\nexport async function transformNewBLockedRooms(data: any): Promise<RoomBlockDetails> {\r\n  const stayStatus = await getStayStatus();\r\n  return {\r\n    ID: data.POOL,\r\n    NOTES: '',\r\n    BALANCE: '',\r\n    NAME:\r\n      data.NOTES !== ''\r\n        ? data.NOTES\r\n        : data.STAY_STATUS_CODE === '003'\r\n        ? renderBlock003Date(data.BLOCKED_TILL_DATE, data.BLOCKED_TILL_HOUR, data.BLOCKED_TILL_MINUTE)\r\n        : stayStatus.find(st => st.code === data.STAY_STATUS_CODE).value || '',\r\n    RELEASE_AFTER_HOURS: data.DESCRIPTION,\r\n    PR_ID: data.pr_id,\r\n    ENTRY_DATE: data.BLOCKED_TILL_DATE,\r\n    ENTRY_HOUR: data.BLOCKED_TILL_HOUR,\r\n    ENTRY_MINUTE: data.BLOCKED_TILL_MINUTE,\r\n    OPTIONAL_REASON: data.NOTES,\r\n    FROM_DATE: data.from_date,\r\n    TO_DATE: data.to_date,\r\n    NO_OF_DAYS: calculateDaysBetweenDates(data.from_date, data.to_date),\r\n    STATUS: status[data.STAY_STATUS_CODE],\r\n    POOL: data.POOL,\r\n    STATUS_CODE: data.STAY_STATUS_CODE,\r\n    OUT_OF_SERVICE: data.STAY_STATUS_CODE === '004',\r\n    FROM_DATE_STR: data.format.from_date,\r\n    TO_DATE_STR: data.format.to_date,\r\n  };\r\n}\r\nexport function calculateDaysBetweenDates(from_date: string, to_date: string) {\r\n  const startDate = moment(from_date, 'YYYY-MM-DD');\r\n  const endDate = moment(to_date, 'YYYY-MM-DD');\r\n  const daysDiff = endDate.diff(startDate, 'days');\r\n  return daysDiff || 1;\r\n}\r\n"]}