{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/utils/validation.ts"],"names":[],"mappings":"AAeA,MAAM,UAAU,YAAY,CAAI,IAAO,EAAE,KAA0C;IACjF,IAAI,OAAO,GAAG,IAAI,CAAC;IACnB,MAAM,MAAM,GAAgC,EAAE,CAAC;IAE/C,KAAK,MAAM,SAAS,IAAI,KAAK,EAAE,CAAC;QAC9B,MAAM,aAAa,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;QACvC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9B,IAAI,CAAC,aAAa;YAAE,SAAS;QAE7B,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;QAEvB,WAAW;QACX,IAAI,aAAa,CAAC,QAAQ,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,EAAE,CAAC,EAAE,CAAC;YACtF,OAAO,GAAG,KAAK,CAAC;YAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QACpD,CAAC;QAED,gBAAgB;QAChB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,IAAI,aAAa,CAAC,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC;gBACpF,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,qBAAqB,aAAa,CAAC,SAAS,GAAG,CAAC,CAAC;YAC1E,CAAC;YACD,IAAI,aAAa,CAAC,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,aAAa,CAAC,SAAS,EAAE,CAAC;gBACpF,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,qBAAqB,aAAa,CAAC,SAAS,GAAG,CAAC,CAAC;YAC1E,CAAC;QACH,CAAC;QAED,gBAAgB;QAChB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YAC9B,IAAI,aAAa,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;gBAC3E,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,oBAAoB,aAAa,CAAC,QAAQ,GAAG,CAAC,CAAC;YACxE,CAAC;YACD,IAAI,aAAa,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;gBAC3E,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,oBAAoB,aAAa,CAAC,QAAQ,GAAG,CAAC,CAAC;YACxE,CAAC;QACH,CAAC;QAED,qBAAqB;QACrB,IAAI,aAAa,CAAC,OAAO,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;YACxE,OAAO,GAAG,KAAK,CAAC;YAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC5C,CAAC;QAED,oBAAoB;QACpB,IAAI,aAAa,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;YACzD,OAAO,GAAG,KAAK,CAAC;YAChB,MAAM,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;IAED,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC;AAC7B,CAAC","sourcesContent":["export type ValidationRule = {\r\n  required?: boolean;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  minValue?: number;\r\n  maxValue?: number;\r\n  pattern?: RegExp;\r\n  custom?: (value: any) => boolean;\r\n};\r\n\r\ntype ValidationResult = {\r\n  isValid: boolean;\r\n  errors: { [key: string]: string[] };\r\n};\r\n\r\nexport function validateForm<T>(data: T, rules: { [P in keyof T]?: ValidationRule }): ValidationResult {\r\n  let isValid = true;\r\n  const errors: { [key: string]: string[] } = {};\r\n\r\n  for (const fieldName in rules) {\r\n    const rulesForField = rules[fieldName];\r\n    const value = data[fieldName];\r\n    if (!rulesForField) continue;\r\n\r\n    errors[fieldName] = [];\r\n\r\n    // Required\r\n    if (rulesForField.required && (value === null || value === undefined || value === '')) {\r\n      isValid = false;\r\n      errors[fieldName].push('This field is required.');\r\n    }\r\n\r\n    // String Length\r\n    if (typeof value === 'string') {\r\n      if (rulesForField.minLength !== undefined && value.length < rulesForField.minLength) {\r\n        isValid = false;\r\n        errors[fieldName].push(`Minimum length is ${rulesForField.minLength}.`);\r\n      }\r\n      if (rulesForField.maxLength !== undefined && value.length > rulesForField.maxLength) {\r\n        isValid = false;\r\n        errors[fieldName].push(`Maximum length is ${rulesForField.maxLength}.`);\r\n      }\r\n    }\r\n\r\n    // Numeric Range\r\n    if (typeof value === 'number') {\r\n      if (rulesForField.minValue !== undefined && value < rulesForField.minValue) {\r\n        isValid = false;\r\n        errors[fieldName].push(`Minimum value is ${rulesForField.minValue}.`);\r\n      }\r\n      if (rulesForField.maxValue !== undefined && value > rulesForField.maxValue) {\r\n        isValid = false;\r\n        errors[fieldName].push(`Maximum value is ${rulesForField.maxValue}.`);\r\n      }\r\n    }\r\n\r\n    // Regular Expression\r\n    if (rulesForField.pattern && !rulesForField.pattern.test(String(value))) {\r\n      isValid = false;\r\n      errors[fieldName].push('Invalid format.');\r\n    }\r\n\r\n    // Custom Validation\r\n    if (rulesForField.custom && !rulesForField.custom(value)) {\r\n      isValid = false;\r\n      errors[fieldName].push('Custom validation failed.');\r\n    }\r\n  }\r\n\r\n  return { isValid, errors };\r\n}\r\n"]}