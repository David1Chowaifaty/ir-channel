import{a as t}from"./p-103ecfd7.js";import{B as o}from"./p-1c70a483.js";import{j as r}from"./p-f33057f4.js";import{T as e}from"./p-5872a6ca.js";class s extends e{constructor(){super(...arguments);this.bookingService=new o}async reallocateEvent(o,r,e,s){try{const n=this.getToken();if(n){console.log(o,r,e,s);const{data:a}=await t.post(`/ReAllocate_Exposed_Room?Ticket=${n}`,{pool:o,destination_pr_id:r,from_date:e,to_date:s});if(a.ExceptionMsg!==""){throw new Error(a.ExceptionMsg)}console.log(a);return a}else{throw new Error("Invalid Token")}}catch(t){console.error(t);throw new Error(t)}}async deleteEvent(o){try{const r=this.getToken();if(r){const{data:e}=await t.post(`/UnBlock_Exposed_Unit?Ticket=${r}`,{POOL:o});if(e.ExceptionMsg!==""){throw new Error(e.ExceptionMsg)}return e.My_Result}else{throw new Error("Invalid Token")}}catch(t){console.log(t);throw new Error(t)}}async updateBlockedEvent(t){try{const o=this.getToken();if(o){const e=r(+t.RELEASE_AFTER_HOURS);await this.deleteEvent(t.POOL);this.bookingService.setToken(o);const s=await this.bookingService.blockUnit(Object.assign({from_date:this.formatDate(t.FROM_DATE),to_date:this.formatDate(t.TO_DATE),pr_id:t.PR_ID,STAY_STATUS_CODE:t.OUT_OF_SERVICE?"004":t.RELEASE_AFTER_HOURS===0?"002":"003",DESCRIPTION:t.RELEASE_AFTER_HOURS||"",NOTES:t.OPTIONAL_REASON||""},e));return s}else{throw new Error("Invalid Token")}}catch(t){console.error(t);throw new Error(t)}}formatDate(t){return t.split("/").join("-")}}export{s as E};
//# sourceMappingURL=p-d9c02528.js.map